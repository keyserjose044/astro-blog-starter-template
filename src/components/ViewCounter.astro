---
/**
 * ViewCounter.astro
 * Props:
 *   path?: string   // per-page key (prefer passing Astro.url.pathname)
 *   label?: string  // default "views"
 */
const { path = "", label = "views" } = Astro.props;

// unique id so multiple counters on one page won't clash
const elId = "llz-view-" + Math.random().toString(36).slice(2, 8);
---
<span id={elId} aria-live="polite">â€”</span>

<script is:inline>
  (() => {
    const normalize = (p) => {
      try {
        return new URL("https://x" + (p.startsWith("/") ? p : "/" + p))
          .pathname.replace(/\/+$/,"") || "/";
      } catch { return "/"; }
    };

    const elId = ${JSON.stringify(elId)};
    const serverPath = ${JSON.stringify(path)};
    const label = ${JSON.stringify(label)};

    const p = normalize(serverPath || location.pathname);

    // 1) increment (fire-and-forget)
    try {
      fetch(`https://stats.lifeloggerz.com/v?p=${encodeURIComponent(p)}`, {
        mode: "no-cors",
        keepalive: true
      });
    } catch (_) {}

    // 2) read & render
    fetch(`https://stats.lifeloggerz.com/count/views?p=${encodeURIComponent(p)}`, {
      cache: "no-store"
    })
      .then(r => r.ok ? r.json() : Promise.reject(r.status))
      .then(({ count }) => {
        const el = document.getElementById(elId);
        if (el) el.textContent = `${count} ${label}`;
      })
      .catch((e) => {
        // Optional: comment this out later, useful while wiring up
        console.warn("ViewCounter read failed:", e);
      });
  })();
</script>
