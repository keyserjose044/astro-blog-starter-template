---
import BaseHead from '../components/BaseHead.astro';
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
import FormattedDate from '../components/FormattedDate.astro';

interface Props {
  title: string;
  description?: string;
  pubDate?: Date | string;
  updatedDate?: Date | string;
  heroImage?: string;
  wide?: boolean;
  heroImageStyle?: string;
}

const { title, description, pubDate, updatedDate, heroImage, wide = false } = Astro.props as Props;

function toValidDate(v: unknown): Date | null {
  if (!v) return null;
  if (v instanceof Date) return isNaN(v.getTime()) ? null : v;
  const d = new Date(String(v));
  return isNaN(d.getTime()) ? null : d;
}

const pub = toValidDate(pubDate);
const upd = toValidDate(updatedDate);
const hasPub = !!pub;
const hasUpd = !!upd;
---

<html lang="en">
  <head>
    <BaseHead title={title} description={description} />
    <style>
      :root {
        --prose-max: 68ch;
        --shadow: 0 4px 16px rgba(0,0,0,0.08);
        --step--1: clamp(0.95rem, 0.9rem + 0.1vw, 1rem);
        --step-0: clamp(1rem, 0.98rem + 0.2vw, 1.08rem);
        --step-3: clamp(1.45rem, 1.15rem + 1.4vw, 1.9rem);
      }

      @media (min-width: 900px) {
        :root { --prose-max: clamp(60ch, 90vw, 1100px); }
      }
      @media (min-width: 1200px) {
        .prose--wide { --prose-max: clamp(60ch, 90vw, 1280px); }
      }

      html, body { background: #ffffff; }

      main { width: 100%; margin: 0; }

      .wrap {
        width: 100%;
        max-width: var(--prose-max);
        margin: 0 auto;
        padding: 0 1rem 2.25rem;
      }
      @media (max-width: 360px) {
        .wrap { padding-inline: 0.75rem; }
      }

      /* -------------------- HERO IMAGE -------------------- */
      .hero-image {
        width: 100%;
        margin: 0 auto 1rem;
        text-align: center;
        position: relative;
      }

      .hero-image img {
        display: block;
        margin: 0 auto;
        width: 100%;
        height: auto;
        border-radius: 12px;
        box-shadow: var(--shadow);
        max-width: 1100px;
        transition: all 0.3s ease;
      }

      /* Portrait-specific adjustments on desktop */
      @media (min-width: 900px) {
        .hero-image img.portrait {
          width: auto;
          max-width: 100%;
          max-height: 80vh;
          object-fit: contain;
        }

        /* Landscape â€” letterboxed look (no cropping, scales smoothly) */
        .hero-image img.landscape {
          width: auto;
          max-width: 100%;
          max-height: 90vh;
          object-fit: contain;
          background-color: #ffffff; /* frame around it */
          padding: 0.5rem;
          border-radius: 12px;
        }
      }

      /* Mobile: responsive full width */
      @media (max-width: 899px) {
        .hero-image img {
          width: 100%;
          height: auto;
          object-fit: contain;
          max-height: none;
        }
      }
      /* ---------------------------------------------------- */

      .prose {
        max-width: var(--prose-max);
        margin: 0 auto;
        color: #111827;
        line-height: 1.7;
        font-size: var(--step-0);
      }

      .title {
        margin-bottom: 0.75em;
        padding: 0.85em 0;
        text-align: center;
        line-height: 1;
      }
      .title h1 {
        margin: 0 0 0.4em 0;
        font-size: var(--step-3);
      }
      .date { margin-bottom: 0.25em; color: #6b7280; }
      .last-updated-on { font-style: italic; }

      .prose img, .prose video { max-width: 100%; height: auto; }
      .prose table { display: block; width: 100%; overflow-x: auto; -webkit-overflow-scrolling: touch; }
      .prose pre { overflow-x: auto; -webkit-overflow-scrolling: touch; }
      .prose code { font-size: var(--step--1); }
      .prose hr { margin: 1.25rem 0; }
    </style>
  </head>

  <body>
    <Header />
    <main>
      <article class={`wrap ${wide ? 'prose--wide' : ''}`}>
        {heroImage && (
          <div class="hero-image">
            <img
              src={heroImage}
              alt={title}
              loading="eager"
              sizes="(max-width: 600px) 100vw, (max-width: 1100px) 90vw, 1100px"
              style={Astro.props.heroImageStyle}
              onload="this.classList.add(this.naturalWidth > this.naturalHeight ? 'landscape' : 'portrait');"
            />
          </div>
        )}

        <div class="prose">
          <div class="title">
            {(hasPub || hasUpd) && (
              <div class="date">
                {hasPub && <FormattedDate date={pub!} />}
                {hasUpd && (
                  <div class="last-updated-on">
                    Last updated on <FormattedDate date={upd!} />
                  </div>
                )}
              </div>
            )}
            <h1>{title}</h1>
            <hr />
          </div>
          <slot />
        </div>
      </article>
    </main>
    <Footer />
  </body>
</html>
