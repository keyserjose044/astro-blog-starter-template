---
/* src/pages/composers.astro */
import BaseHead from '../components/BaseHead.astro';
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
import { SITE_TITLE } from '../consts';

/* Hardcoded as requested */
const RAINDROP_TOKEN = "2df3b611-fa2c-4794-a359-1bf08efdd67f";
const COLLECTION_ID = "58399760";

/** Fetch every item in the collection (Raindrop pagination â‰ˆ 50/page, 0-based). */
async function fetchAllRaindrops() {
  const perPage = 50;
  let page = 0;
  const items = [];

  while (true) {
    const res = await fetch(
      `https://api.raindrop.io/rest/v1/raindrops/${COLLECTION_ID}?perpage=${perPage}&page=${page}`,
      { headers: { Authorization: `Bearer ${RAINDROP_TOKEN}` } }
    );
    if (!res.ok) {
      const t = await res.text();
      throw new Error(`Raindrop fetch failed (${res.status}): ${t}`);
    }
    const json = await res.json();
    const batch = json?.items ?? [];
    if (batch.length === 0) break;

    items.push(...batch);
    if (batch.length < perPage) break; // last page
    page += 1;
  }

  // Newest â†’ oldest (fallback to lastUpdate)
  items.sort((a, b) => {
    const ad = new Date(a.created || a.lastUpdate || 0).getTime();
    const bd = new Date(b.created || b.lastUpdate || 0).getTime();
    return bd - ad;
  });

  return items.map((it) => ({
    id: it._id,
    title: it.title ?? "Untitled",
    href: it.link ?? "#",
    cover: it.cover || (it.media?.[0]?.link ?? ""),
    tags: it.tags ?? [],
  }));
}

const composers = await fetchAllRaindrops();
---

<!doctype html>
<html lang="en">
  <head>
    <BaseHead title={`${SITE_TITLE} â€” Composers`} />
    <style>
      :root { --gap: 22px; --ink: #0e121b; --muted: #5e6573; --border: #e6e9ef; }
      * { box-sizing: border-box; }
      body { margin: 0; font-family: system-ui, -apple-system, Segoe UI, Roboto, sans-serif; background: #f6f8fb; color: var(--ink); }

      /* full-bleed shell */
      .wrap { margin: 0 auto; padding: 28px 40px 48px; max-width: none; }

      /* readable intro/search */
      .intro { max-width: 1200px; margin: 0 auto 24px; }
      h1 { margin: 0 0 12px; font-weight: 800; letter-spacing: -0.02em; display: flex; gap: .6rem; align-items: center; }
      .hint { color: var(--muted); margin: 6px 0 20px; }
      .toolbar { display: flex; align-items: center; gap: 12px; margin: 6px 0 24px; }
      .count { color: var(--muted); font-size: 0.9rem; }
      input[type="search"] {
        width: 100%; max-width: 520px; padding: 12px 14px; border-radius: 12px;
        border: 1px solid var(--border); background: #fff; color: var(--ink);
        font-size: 0.95rem; box-shadow: 0 1px 2px rgba(0,0,0,.03);
      }

      /* full-bleed grid (6 across on wide screens) */
      .grid {
        display: grid;
        grid-template-columns: repeat(6, 1fr);
        gap: var(--gap);
        align-items: start;
        max-width: none;
      }
      @media (max-width: 1600px) { .grid { grid-template-columns: repeat(5, 1fr); } }
      @media (max-width: 1320px) { .grid { grid-template-columns: repeat(4, 1fr); } }
      @media (max-width: 1024px) { .grid { grid-template-columns: repeat(3, 1fr); } }
      @media (max-width: 720px)  { .grid { grid-template-columns: repeat(2, 1fr); } }
      @media (max-width: 420px)  { .grid { grid-template-columns: 1fr; } }

      .card { display: flex; flex-direction: column; gap: 8px; text-decoration: none; color: inherit; }
      .thumb {
        width: 100%;
        aspect-ratio: 1/1;     /* square works nicely for portraits */
        object-fit: cover;
        border-radius: 12px;
        box-shadow: 0 10px 24px rgba(0,0,0,.12);
        background: #f0f2f7;
        border: 1px solid var(--border);
      }
      .title { font-weight: 700; font-size: 0.98rem; line-height: 1.3; }
      .tags  { color: var(--muted); font-size: .82rem; white-space: nowrap; overflow: hidden; text-overflow: ellipsis; }
      .card:focus-visible { outline: 2px solid #405cf5; outline-offset: 4px; border-radius: 12px; }
    </style>
  </head>
  <body>
    <Header />

    <main class="wrap">
      <div class="intro">
        <h1>ðŸŽ¼ Composers</h1>
        <p class="hint">Powered by Raindrop. Start typing to filter.</p>
        <div class="toolbar">
          <input id="q" type="search" placeholder="Search by title or tagâ€¦" aria-label="Filter composers" />
          <span id="count" class="count"></span>
        </div>
      </div>

      <div class="grid" id="grid">
        {composers.map(c => (
          <a class="card" href={c.href} target="_blank" rel="noopener noreferrer"
             title={c.title}
             data-title={c.title.toLowerCase()}
             data-tags={(c.tags || []).join(" ").toLowerCase()}>
            <img class="thumb" src={c.cover} alt={c.title} loading="lazy" />
            <div class="title">{c.title}</div>
            {c.tags?.length ? <div class="tags">#{c.tags.slice(0,3).join('  #')}</div> : null}
          </a>
        ))}
      </div>
    </main>

    <Footer />

    <script>
      const q = document.getElementById('q');
      const cards = [...document.querySelectorAll('.card')];
      const count = document.getElementById('count');
      function updateCount() {
        const visible = cards.filter(c => c.style.display !== 'none').length;
        count.textContent = `${visible} of ${cards.length}`;
      }
      q.addEventListener('input', () => {
        const s = q.value.toLowerCase();
        cards.forEach(c => {
          const t = c.dataset.title || '';
          const tags = c.dataset.tags || '';
          c.style.display = (t.includes(s) || tags.includes(s)) ? '' : 'none';
        });
        updateCount();
      });
      updateCount();
    </script>
  </body>
</html>
