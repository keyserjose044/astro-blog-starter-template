---
// src/pages/albums.astro
import BaseHead from '../components/BaseHead.astro';
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
import { SITE_TITLE } from '../consts';

/* Prefer env secrets in prod
   const RAINDROP_TOKEN = import.meta.env.RAINDROP_TOKEN;
   const COLLECTION_ID  = import.meta.env.RAINDROP_COLLECTION_ALBUMS_ID ?? 'YOUR_ALBUMS_COLLECTION_ID';
*/
const RAINDROP_TOKEN = import.meta.env.RAINDROP_TOKEN ?? "2df3b611-fa2c-4794-a359-1bf08efdd67f";
const COLLECTION_ID  = import.meta.env.RAINDROP_COLLECTION_ALBUMS_ID ?? "54514878";

/** Fetch every item (Raindrop pagination â‰ˆ 50/page, 0-based). */
async function fetchAllRaindrops() {
  const perPage = 50;
  let page = 0;
  const items: any[] = [];

  while (true) {
    const res = await fetch(
      `https://api.raindrop.io/rest/v1/raindrops/${COLLECTION_ID}?perpage=${perPage}&page=${page}`,
      { headers: { Authorization: `Bearer ${RAINDROP_TOKEN}` } }
    );
    if (!res.ok) {
      const t = await res.text();
      throw new Error(`Raindrop fetch failed (${res.status}): ${t}`);
    }
    const json = await res.json();
    const batch = json?.items ?? [];
    if (batch.length === 0) break;
    items.push(...batch);
    if (batch.length < perPage) break;
    page += 1;
  }

  // newest first
  items.sort((a, b) => {
    const ad = new Date(a.created || a.lastUpdate || 0).getTime();
    const bd = new Date(b.created || b.lastUpdate || 0).getTime();
    return bd - ad;
  });

  const placeholder = '/images/album-placeholder.png'; // optional: add to public/images

  return items.map((it) => {
    const mediaLink = it.media?.[0]?.link ?? '';
    const cover = it.cover || mediaLink || placeholder;
    const note  = it.excerpt || it.note || '';   // Raindrop "Note" field
    return {
      id: it._id,
      title: it.title ?? 'Untitled',
      href: it.link ?? '#',
      cover,
      note,                 // expose note to UI/search
      tags: it.tags ?? [],  // kept, but not shown
    };
  });
}

const albums = await fetchAllRaindrops();
---

<!doctype html>
<html lang="en">
  <head>
    <BaseHead title={`${SITE_TITLE} â€” Albums`} description="Albums gallery powered by Raindrop â€” auto-updated from my collection." />
    <style>
      :root {
        --gap: 22px;
        --ink: #0e121b;
        --muted: #5e6573;
        --border: #e6e9ef;
        --surface: #ffffff;
      }
      * { box-sizing: border-box; }
      body {
        margin: 0;
        font-family: system-ui, -apple-system, Segoe UI, Roboto, sans-serif;
        background: #f6f8fb;
        color: var(--ink);
      }

      /* Section wrapper */
      .wrap {
        margin: 0 auto;
        padding-block: 28px 48px;
        padding-inline: clamp(16px, 3vw, 48px);
        max-width: 100%;
      }
      /* Full-bleed section */
      .wrap--wide {
        width: 100dvw;
        margin-left: calc(50% - 50dvw);
        margin-right: calc(50% - 50dvw);
        padding-inline: 0;
      }

      /* Header band (centered) */
      .intro {
        max-width: 920px;
        margin: 0 auto 24px;
        text-align: center;
        padding-inline: clamp(16px, 3vw, 48px);
      }
      h1 {
        margin: 0 0 12px;
        font-weight: 800;
        letter-spacing: -0.02em;
        display: flex;
        gap: .6rem;
        align-items: center;
        justify-content: center;
      }
      .hint { color: var(--muted); margin: 6px 0 20px; }

      .toolbar {
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 12px;
        margin: 6px 0 24px;
      }
      .toolbar input[type="search"] {
        width: 100%;
        max-width: 520px;
        margin-inline: auto;
        padding: 12px 14px;
        border-radius: 12px;
        border: 1px solid var(--border);
        background: var(--surface);
        color: var(--ink);
        font-size: 0.95rem;
        box-shadow: 0 1px 2px rgba(0,0,0,.03);
      }

      /* Grid */
      .grid {
        display: grid;
        gap: var(--gap);
        align-items: start;
        grid-template-columns: repeat(auto-fit, minmax(260px, 1fr));
        max-width: 100%;
      }
      @media (min-width: 1800px) {
        .grid { grid-template-columns: repeat(auto-fit, minmax(150px, 1fr)); }
      }

      .fullbleed {
        width: 100%;
        margin: 0;
        padding-inline: clamp(16px, 3vw, 48px);
      }

      .card {
        display: flex;
        flex-direction: column;
        gap: 8px;
        text-decoration: none;
        color: inherit;
        border-radius: 12px;
      }
      .thumb {
        width: 100%;
        aspect-ratio: 1 / 1;
        object-fit: cover;
        border-radius: 12px;
        box-shadow: 0 10px 24px rgba(0,0,0,.12);
        background: #f0f2f7;
        border: 1px solid var(--border);
      }
      .title { font-weight: 700; font-size: 0.98rem; line-height: 1.3; }

      /* New: Note styling (shows Raindrop "excerpt") */
      .note {
        color: var(--muted);
        font-size: .9rem;
        line-height: 1.3;
        display: -webkit-box;
        -webkit-line-clamp: 2;          /* clamp to 2 lines */
        -webkit-box-orient: vertical;
        overflow: hidden;
        text-overflow: ellipsis;
      }

      .card:focus-visible {
        outline: 2px solid #405cf5;
        outline-offset: 4px;
        border-radius: 12px;
      }

      /* Empty state */
      .empty {
        text-align: center;
        color: var(--muted);
        padding: 40px 0 24px;
      }
    </style>
  </head>
  <body>
    <Header />

    <main class="wrap wrap--wide">
      <div class="intro" role="region" aria-label="Albums header">
        <h1>ðŸŽµ Albums</h1>
        <p class="hint">My life in albums â€” every listen logged and displayed here.</p>
        <div class="toolbar">
          <input id="q" type="search" placeholder="Search by title or noteâ€¦" aria-label="Filter albums" />
        </div>
      </div>

      {albums.length === 0 ? (
        <div class="empty">No albums found in this collection.</div>
      ) : (
        <div class="grid fullbleed" id="grid" role="list">
          {albums.map(a => (
            <a
              class="card"
              role="listitem"
              href={a.href}
              target="_blank"
              rel="noopener noreferrer"
              title={a.title}
              data-title={a.title.toLowerCase()}
              data-note={(a.note || '').toLowerCase()}
            >
              <img
                class="thumb"
                src={a.cover}
                alt={a.title}
                loading="lazy"
                decoding="async"
                sizes="(min-width: 1800px) 300px, (min-width: 900px) 25vw, 50vw"
              />
              <div class="title">{a.title}</div>
              {a.note ? <div class="note">{a.note}</div> : null}
            </a>
          ))}
        </div>
      )}
    </main>

    <Footer />

    <script>
      // Debounce helper
      function debounce(fn, ms){ let t; return (...args)=>{ clearTimeout(t); t=setTimeout(()=>fn(...args), ms); }; }

      // Normalize to lower-case, accent/diacritic-insensitive text
      const norm = s => (s || "")
        .toLowerCase()
        .normalize('NFD')
        .replace(/[\u0300-\u036f]/g, '');

      // Wrap in IIFE to avoid top-level return issues
      (function initAlbumsFilter(){
        const q = document.getElementById('q');
        const grid = document.getElementById('grid');
        if (!q || !grid) { return; }

        const cards = Array.from(grid.querySelectorAll('.card'));

        // Precompute searchable haystacks (title + note)
        const haystacks = new Map(cards.map(c => {
          const hay = norm((c.dataset.title || '') + ' ' + (c.dataset.note || ''));
          return [c, hay];
        }));

        function filterNow() {
          const s = norm(q.value.trim());
          if (!s) { cards.forEach(c => c.style.display = ''); return; }
          const words = s.split(/\s+/);
          cards.forEach(c => {
            const hay = haystacks.get(c);
            const match = words.every(w => hay.includes(w));
            c.style.display = match ? '' : 'none';
          });
        }

        q.addEventListener('input', debounce(filterNow, 80));

        // QoL: ESC clears; '/' focuses search (unless typing in an input)
        window.addEventListener('keydown', (e) => {
          if (e.key === 'Escape') { q.value = ''; filterNow(); q.focus(); }
          else if (e.key === '/' && e.target === document.body) { e.preventDefault(); q.focus(); }
        });

        // Initial run
        filterNow();
      })();
    </script>
  </body>
</html>
